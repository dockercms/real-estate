package com.ztuo.modules.house.service.impl;

import com.ztuo.common.utils.Constant;
import com.ztuo.common.utils.RedisUtil;
import com.ztuo.modules.house.dao.DataConfigurationDAO;
import com.ztuo.modules.house.entity.DataConfiguration;
import com.ztuo.modules.house.entity.DataConfigurationExample;
import com.ztuo.modules.house.entity.DataConfigurationInfo;
import com.ztuo.modules.house.service.IDataConfigurationSV;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.concurrent.TimeUnit;

@Service
public class DataConfigurationSVImpl implements IDataConfigurationSV {
    
    @Autowired
    private DataConfigurationDAO dao;

    @Autowired
    private RedisUtil redisUtil;
    
    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int countByExample(DataConfigurationExample example) throws Exception {
    		return dao.countByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int deleteByExample(DataConfigurationExample example) throws Exception {
    		return dao.deleteByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int deleteByPrimaryKey(Long parameterId) throws Exception {
    		return dao.deleteByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int save(DataConfiguration record) throws Exception {
    		return dao.save(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int saveSelective(DataConfiguration record) throws Exception {
    		return dao.saveSelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public List<DataConfiguration> getByExample(DataConfigurationExample example) throws Exception {
    		return dao.getByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public DataConfiguration getByPrimaryKey(Long parameterId) throws Exception {
    		return dao.getByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int updateByExampleSelective(DataConfiguration record, DataConfigurationExample example) throws Exception {
    		return dao.updateByExampleSelective(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int updateByExample(DataConfiguration record, DataConfigurationExample example) throws Exception {
    		return dao.updateByExample(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int updateByPrimaryKeySelective(DataConfiguration record) throws Exception {
    		return dao.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table data_configuration
     *
     * @date 2020-02-11 10:05:12
     */
    public int updateByPrimaryKey(DataConfiguration record) throws Exception {
    		return dao.updateByPrimaryKey(record);
    }

    @Override
    public List<DataConfiguration> findAll(Long parentNo) {
        List<DataConfiguration> result;
        Object o = redisUtil.get(Constant.DATA_CONFIGURATION+parentNo);
        if (o != null){
            result = (List<DataConfiguration>) o;
        }else {
            DataConfigurationExample example = new DataConfigurationExample();
            DataConfigurationExample.Criteria criteria = example.createCriteria();
            criteria.andParentIdEqualTo(parentNo);
            result = dao.getByExample(example);
            redisUtil.set(Constant.DATA_CONFIGURATION+parentNo,result,3, TimeUnit.DAYS);
        }

        return result;
    }

    @Override
    public List<DataConfigurationInfo> getByExampleInfo(Long parentNo) {
        List<DataConfigurationInfo> result;
        Object o = redisUtil.get(Constant.INFO_DATA_CONFIGURATION+parentNo);
        if (o != null){
            result = (List<DataConfigurationInfo>) o;
        }else {
            DataConfigurationExample example = new DataConfigurationExample();
            DataConfigurationExample.Criteria criteria = example.createCriteria();
            criteria.andParentIdEqualTo(parentNo);
            result = dao.getByExampleInfo(example);
            redisUtil.set(Constant.INFO_DATA_CONFIGURATION+parentNo,result,3, TimeUnit.DAYS);
        }

        return result;
    }

    @Override
    public List<DataConfigurationInfo> getByExampleInfoWy(Long parentNo) {
        List<DataConfigurationInfo> result;
        Object o = redisUtil.get(Constant.WY_DATA_CONFIGURATION+parentNo);
        if (o != null){
            result = (List<DataConfigurationInfo>) o;
        }else {
            DataConfigurationExample example = new DataConfigurationExample();
            DataConfigurationExample.Criteria criteria = example.createCriteria();
            criteria.andParentIdEqualTo(parentNo);
            result = dao.getByExampleInfoWy(example);
            redisUtil.set(Constant.WY_DATA_CONFIGURATION+parentNo,result,3, TimeUnit.DAYS);
        }
        return result;
    }
}
