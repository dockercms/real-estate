package com.ztuo.modules.house.service.impl;


import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ztuo.common.utils.RestResponse;
import com.ztuo.modules.house.dao.FeedbackDAO;
import com.ztuo.modules.house.entity.Feedback;
import com.ztuo.modules.house.entity.FeedbackExample;
import com.ztuo.modules.house.service.IFeedbackSV;
import com.ztuo.modules.house.vo.FeedBackQueryVO;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FeedbackSVImpl implements IFeedbackSV {
    
    @Autowired
    private FeedbackDAO dao;
    
    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int countByExample(FeedbackExample example) throws Exception {
    		return dao.countByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int deleteByExample(FeedbackExample example) throws Exception {
    		return dao.deleteByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int deleteByPrimaryKey(Long parameterId) throws Exception {
    		return dao.deleteByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int save(Feedback record) throws Exception {
    		return dao.save(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int saveSelective(Feedback record) throws Exception {
    		return dao.saveSelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public List<Feedback> getByExample(FeedbackExample example) throws Exception {
    		return dao.getByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public Feedback getByPrimaryKey(Long parameterId) throws Exception {
    		return dao.getByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByExampleSelective(Feedback record, FeedbackExample example) throws Exception {
    		return dao.updateByExampleSelective(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByExample(Feedback record, FeedbackExample example) throws Exception {
    		return dao.updateByExample(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByPrimaryKeySelective(Feedback record) throws Exception {
    		return dao.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table feedback
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByPrimaryKey(Feedback record) throws Exception {
    		return dao.updateByPrimaryKey(record);
    }

    @Override
    public RestResponse pageQuery(FeedBackQueryVO feedBackQueryVO) throws Exception {
        Page page = new Page(feedBackQueryVO.getPageNum(), feedBackQueryVO.getPageSize());
        FeedbackExample example = new FeedbackExample();
        FeedbackExample.Criteria criteria = example.createCriteria();
        example.setOrderByClause("create_time desc");
        if (StringUtils.isNotBlank(feedBackQueryVO.getStartTime())) {
            criteria.andCreateTimeGreaterThanOrEqualTo(DateUtils.parseDate(feedBackQueryVO.getStartTime(), "yyyy-MM-dd HH:mm:ss"));
        }
        if (StringUtils.isNotBlank(feedBackQueryVO.getEndTime())) {
            criteria.andCreateTimeLessThanOrEqualTo(DateUtils.parseDate(feedBackQueryVO.getEndTime(), "yyyy-MM-dd HH:mm:ss"));
        }
        if (StringUtils.isNotBlank(feedBackQueryVO.getMobile())) {
            criteria.andContractLike(feedBackQueryVO.getMobile());
        }
        List<Feedback> feedbackList = dao.pageQuery(page, example);
        return RestResponse.success(page.setRecords(feedbackList));
    }
}
