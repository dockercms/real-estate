package com.ztuo.modules.house.service.impl;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ztuo.common.utils.DateUtil;
import com.ztuo.modules.house.dao.UserAgreementDAO;
import com.ztuo.modules.house.entity.UserAgreement;
import com.ztuo.modules.house.entity.UserAgreementExample;
import com.ztuo.modules.house.service.IUserAgreementSV;
import com.ztuo.modules.house.vo.UserAgreementVo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserAgreementSVImpl implements IUserAgreementSV {
    
    @Autowired
    private UserAgreementDAO dao;
    
    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int countByExample(UserAgreementExample example) throws Exception {
    		return dao.countByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int deleteByExample(UserAgreementExample example) throws Exception {
    		return dao.deleteByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int deleteByPrimaryKey(Long parameterId) throws Exception {
    		return dao.deleteByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int save(UserAgreement record) throws Exception {
    		return dao.save(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int saveSelective(UserAgreement record) throws Exception {
    		return dao.saveSelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public List<UserAgreement> getByExample(UserAgreementExample example) throws Exception {
    		return dao.getByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public UserAgreement getByPrimaryKey(Long parameterId) throws Exception {
    		return dao.getByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int updateByExampleSelective(UserAgreement record, UserAgreementExample example) throws Exception {
    		return dao.updateByExampleSelective(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int updateByExample(UserAgreement record, UserAgreementExample example) throws Exception {
    		return dao.updateByExample(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int updateByPrimaryKeySelective(UserAgreement record) throws Exception {
    		return dao.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_agreement
     *
     * @date 2020-03-12 17:28:49
     */
    @Override
    public int updateByPrimaryKey(UserAgreement record) throws Exception {
    		return dao.updateByPrimaryKey(record);
    }

    @Override
    public Page<UserAgreement> pageQuery(UserAgreementVo agreementVo)throws Exception {
        Page<UserAgreement> page = new Page<>(agreementVo.getPageNum(),agreementVo.getPageSize());
        UserAgreementExample example = new UserAgreementExample();
        UserAgreementExample.Criteria criteria = example.createCriteria();
        if(StringUtils.isNotEmpty(agreementVo.getAgreementName())){
            criteria.andAgreementNameEqualTo(agreementVo.getAgreementName());
        }
        if(StringUtils.isNotEmpty(agreementVo.getCreateStartTime())){
            criteria.andCreateTimeGreaterThan(DateUtil.YYYY_MM_DD_MM_HH_SS.parse(agreementVo.getCreateStartTime()));
        }
        if(StringUtils.isNotEmpty(agreementVo.getCreateEndTime())){
            criteria.andCreateTimeLessThan(DateUtil.YYYY_MM_DD_MM_HH_SS.parse(agreementVo.getCreateEndTime()));
        }
        example.setOrderByClause(" create_time desc ");
        List<UserAgreement> list = dao.pageQueryByExample(page, example);
        return page.setRecords(list);
    }

    @Override
    public int abandonHistoryAgreement(String agreementType) {
        return dao.abandonHistoryAgreement(agreementType);
    }

    @Override
    public UserAgreement findShelvesAgreement(String type) {
        return dao.findShelvesAgreement(type);
    }
}
