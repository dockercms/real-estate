package com.ztuo.modules.house.service.impl;


import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ztuo.common.utils.DateUtil;
import com.ztuo.modules.house.dao.UserHouseDAO;
import com.ztuo.modules.house.entity.UserHouse;
import com.ztuo.modules.house.entity.UserHouseExample;
import com.ztuo.modules.house.service.IUserHouseSV;
import com.ztuo.modules.house.vo.UserHouseQuery;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class UserHouseSVImpl implements IUserHouseSV {
    
    @Autowired
    private UserHouseDAO dao;
    
    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int countByExample(UserHouseExample example) throws Exception {
    		return dao.countByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int deleteByExample(UserHouseExample example) throws Exception {
    		return dao.deleteByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int deleteByPrimaryKey(Long parameterId) throws Exception {
    		return dao.deleteByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int save(UserHouse record) throws Exception {
    		return dao.save(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int saveSelective(UserHouse record) throws Exception {
    		return dao.saveSelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public List<UserHouse> getByExample(UserHouseExample example) throws Exception {
    		return dao.getByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public UserHouse getByPrimaryKey(Long parameterId) throws Exception {
    		return dao.getByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByExampleSelective(UserHouse record, UserHouseExample example) throws Exception {
    		return dao.updateByExampleSelective(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByExample(UserHouse record, UserHouseExample example) throws Exception {
    		return dao.updateByExample(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByPrimaryKeySelective(UserHouse record) throws Exception {
    		return dao.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByPrimaryKey(UserHouse record) throws Exception {
    		return dao.updateByPrimaryKey(record);
    }

    @Override
    public Page<UserHouse> pageQuery(UserHouseQuery houseQuery, Map<String, Object> params) throws Exception{
        Page page = new Page(houseQuery.getPageNum(),houseQuery.getPageSize());
        UserHouseExample example = new UserHouseExample();
        UserHouseExample.Criteria criteria = example.createCriteria();
        List<String> loadTypes = houseQuery.getLoadTypes();
        if(loadTypes !=null && loadTypes.size()>0){
            criteria.andLoadTypeIn(loadTypes);
        }
        if(StringUtils.isNotEmpty(houseQuery.getStatus())){
            criteria.andStatusEqualTo(houseQuery.getStatus());
        }
        if(StringUtils.isNotEmpty(houseQuery.getCreateStartTime())){
            criteria.andCreateTimeGreaterThan(DateUtil.YYYY_MM_DD_MM_HH_SS.parse(houseQuery.getCreateStartTime()));
        }
        if(StringUtils.isNotEmpty(houseQuery.getCreateEndTime())){
            criteria.andCreateTimeLessThan(DateUtil.YYYY_MM_DD_MM_HH_SS.parse(houseQuery.getCreateEndTime()));
        }
        if(houseQuery.getUserId()!=null){
            criteria.andUserIdEqualTo(houseQuery.getUserId().toString());
        }
        if(StringUtils.isNotEmpty(houseQuery.getHouseZone())){
            criteria.andHousingZoneEqualTo(houseQuery.getHouseZone());
        }
        if(StringUtils.isNotEmpty(houseQuery.getWebQuery())){
            criteria.andWebQuery();
        }
        example.setOrderByClause(" create_time desc ");
        List<UserHouse> list;
        list  = dao.pageQueryByExample(page, example, params);
        return page.setRecords(list);
    }
}
