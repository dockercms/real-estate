package com.ztuo.modules.house.service.impl;


import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ztuo.common.utils.DateUtil;
import com.ztuo.modules.house.dao.UygurUserHouseDAO;
import com.ztuo.modules.house.entity.UygurUserHouse;
import com.ztuo.modules.house.entity.UygurUserHouseExample;
import com.ztuo.modules.house.service.IUygurUserHouseSV;
import com.ztuo.modules.house.vo.UserHouseQuery;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UygurUserHouseSVImpl implements IUygurUserHouseSV {
    
    @Autowired
    private UygurUserHouseDAO dao;
    
    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int countByExample(UygurUserHouseExample example) throws Exception {
    		return dao.countByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int deleteByExample(UygurUserHouseExample example) throws Exception {
    		return dao.deleteByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int deleteByPrimaryKey(Long parameterId) throws Exception {
    		return dao.deleteByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int save(UygurUserHouse record) throws Exception {
    		return dao.save(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int saveSelective(UygurUserHouse record) throws Exception {
    		return dao.saveSelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public List<UygurUserHouse> getByExample(UygurUserHouseExample example) throws Exception {
    		return dao.getByExample(example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public UygurUserHouse getByPrimaryKey(Long parameterId) throws Exception {
    		return dao.getByPrimaryKey(parameterId);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByExampleSelective(UygurUserHouse record, UygurUserHouseExample example) throws Exception {
    		return dao.updateByExampleSelective(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByExample(UygurUserHouse record, UygurUserHouseExample example) throws Exception {
    		return dao.updateByExample(record, example);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByPrimaryKeySelective(UygurUserHouse record) throws Exception {
    		return dao.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by IDE Plugin.
     * This method corresponds to the database table uygur_user_house
     *
     * @date 2020-02-10 16:50:53
     */
    @Override
    public int updateByPrimaryKey(UygurUserHouse record) throws Exception {
    		return dao.updateByPrimaryKey(record);
    }

    @Override
    public Page<UygurUserHouse> pageQuery(UserHouseQuery houseQuery) throws Exception{
        Page page = new Page(houseQuery.getPageNum(),houseQuery.getPageSize());
        UygurUserHouseExample example = new UygurUserHouseExample();
        UygurUserHouseExample.Criteria criteria = example.createCriteria();
        List<String> loadTypes = houseQuery.getLoadTypes();
        if(loadTypes !=null && loadTypes.size()>0){
            criteria.andLoadTypeIn(loadTypes);
        }
        if(StringUtils.isNotEmpty(houseQuery.getStatus())){
            criteria.andStatusEqualTo(houseQuery.getStatus());
        }
        if(StringUtils.isNotEmpty(houseQuery.getCreateStartTime())){
            criteria.andCreateTimeGreaterThan(DateUtil.YYYY_MM_DD_MM_HH_SS.parse(houseQuery.getCreateStartTime()));
        }
        if(StringUtils.isNotEmpty(houseQuery.getCreateEndTime())){
            criteria.andCreateTimeLessThan(DateUtil.YYYY_MM_DD_MM_HH_SS.parse(houseQuery.getCreateEndTime()));
        }
        if(houseQuery.getUserId()!=null){
            criteria.andUserIdEqualTo(houseQuery.getUserId().toString());
        }
        if(StringUtils.isNotEmpty(houseQuery.getWebQuery())){
            criteria.andWebQuery();
        }
        example.setOrderByClause(" create_time desc ");
        List<UygurUserHouse> list = dao.pageQueryByExample(page,example);
        return page.setRecords(list);
    }

    @Override
    public UygurUserHouse findBySingLabel(String signLabel) {
        UygurUserHouseExample example = new UygurUserHouseExample();
        UygurUserHouseExample.Criteria criteria = example.createCriteria();
        criteria.andSignLabelEqualTo(signLabel);
        List<UygurUserHouse> houseList = dao.getByExample(example);
        if(houseList!=null && houseList.size()==1){
            return houseList.get(0);
        }
        return null;
    }


}
